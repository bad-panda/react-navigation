{"version":3,"sources":["Card.tsx"],"names":["GESTURE_VELOCITY_IMPACT","TRUE","FALSE","GESTURE_RESPONSE_DISTANCE_HORIZONTAL","GESTURE_RESPONSE_DISTANCE_VERTICAL","useNativeDriver","Platform","OS","Card","React","Component","Animated","Value","props","gestureDirection","width","layout","height","closing","velocity","gesture","transitionSpec","onOpen","onClose","onTransitionStart","toValue","getAnimateToValue","spec","close","open","animation","spring","timing","setPointerEventsEnabled","handleStartAnimationInteraction","clearTimeout","pendingGestureCallback","config","isInteraction","start","finished","handleEndAnimationInteraction","enabled","pointerEvents","contentRef","current","setNativeProps","interactionHandle","undefined","console","log","InteractionManager","createInteractionHandle","clearInteractionHandle","interactionHandleAnim","nativeEvent","onGestureBegin","onGestureCanceled","onGestureEnd","gestureVelocityImpact","state","GestureState","BEGAN","isSwiping","setValue","handleStartInteraction","CANCELLED","handleEndInteraction","velocityY","velocityX","animate","END","distance","translation","translationY","translationX","setTimeout","styleInterpolator","index","next","insetTop","insetRight","insetBottom","insetLeft","progress","isClosing","swiping","inverted","layouts","screen","insets","top","right","bottom","left","createRef","componentDidMount","componentDidUpdate","prevProps","componentWillUnmount","gestureActivationCriteria","gestureResponseDistance","vertical","horizontal","maxDeltaX","minOffsetY","hitSlop","invertedMultiplier","minOffsetX","maxDeltaY","render","overlay","overlayEnabled","shadowEnabled","gestureEnabled","pageOverflowEnabled","children","containerStyle","customContainerStyle","contentStyle","rest","interpolatedStyle","getInterpolatedStyle","animationContext","getCardAnimationContext","cardStyle","overlayStyle","shadowStyle","handleGestureEvent","event","backgroundColor","StyleSheet","flatten","isTransparent","alpha","absoluteFill","style","styles","container","handleGestureStateChange","shadow","shadowHorizontal","shadowLeft","shadowRight","shadowVertical","shadowTop","shadowBottom","create","flex","position","shadowRadius","shadowColor","shadowOpacity","shadowOffset"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  View,\n  StyleSheet,\n  ViewProps,\n  StyleProp,\n  ViewStyle,\n  Platform,\n  InteractionManager,\n} from 'react-native';\nimport { EdgeInsets } from 'react-native-safe-area-context';\nimport Color from 'color';\n\nimport CardSheet from './CardSheet';\nimport {\n  PanGestureHandler,\n  GestureState,\n  PanGestureHandlerGestureEvent,\n} from '../GestureHandler';\nimport CardAnimationContext from '../../utils/CardAnimationContext';\nimport getDistanceForDirection from '../../utils/getDistanceForDirection';\nimport getInvertedMultiplier from '../../utils/getInvertedMultiplier';\nimport memoize from '../../utils/memoize';\nimport {\n  TransitionSpec,\n  StackCardStyleInterpolator,\n  GestureDirection,\n  Layout,\n} from '../../types';\n\ntype Props = ViewProps & {\n  index: number;\n  closing: boolean;\n  next?: Animated.AnimatedInterpolation;\n  current: Animated.AnimatedInterpolation;\n  gesture: Animated.Value;\n  layout: Layout;\n  insets: EdgeInsets;\n  pageOverflowEnabled: boolean;\n  gestureDirection: GestureDirection;\n  onOpen: () => void;\n  onClose: () => void;\n  onTransitionStart?: (props: { closing: boolean }) => void;\n  onGestureBegin?: () => void;\n  onGestureCanceled?: () => void;\n  onGestureEnd?: () => void;\n  children: React.ReactNode;\n  overlay: (props: { style: StyleProp<ViewStyle> }) => React.ReactNode;\n  overlayEnabled: boolean;\n  shadowEnabled: boolean;\n  gestureEnabled: boolean;\n  gestureResponseDistance?: {\n    vertical?: number;\n    horizontal?: number;\n  };\n  gestureVelocityImpact: number;\n  transitionSpec: {\n    open: TransitionSpec;\n    close: TransitionSpec;\n  };\n  styleInterpolator: StackCardStyleInterpolator;\n  containerStyle?: StyleProp<ViewStyle>;\n  contentStyle?: StyleProp<ViewStyle>;\n};\n\nconst GESTURE_VELOCITY_IMPACT = 0.3;\n\nconst TRUE = 1;\nconst FALSE = 0;\n\n/**\n * The distance of touch start from the edge of the screen where the gesture will be recognized\n */\nconst GESTURE_RESPONSE_DISTANCE_HORIZONTAL = 50;\nconst GESTURE_RESPONSE_DISTANCE_VERTICAL = 135;\n\nconst useNativeDriver = Platform.OS !== 'web';\n\nexport default class Card extends React.Component<Props> {\n  static defaultProps = {\n    overlayEnabled: Platform.OS !== 'ios',\n    shadowEnabled: true,\n    gestureEnabled: true,\n    gestureVelocityImpact: GESTURE_VELOCITY_IMPACT,\n    overlay: ({ style }: { style: StyleProp<ViewStyle> }) =>\n      style ? (\n        <Animated.View pointerEvents=\"none\" style={[styles.overlay, style]} />\n      ) : null,\n  };\n\n  componentDidMount() {\n    this.animate({ closing: this.props.closing });\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const { layout, gestureDirection, closing } = this.props;\n    const { width, height } = layout;\n\n    if (width !== prevProps.layout.width) {\n      this.layout.width.setValue(width);\n    }\n\n    if (height !== prevProps.layout.height) {\n      this.layout.height.setValue(height);\n    }\n\n    if (gestureDirection !== prevProps.gestureDirection) {\n      this.inverted.setValue(getInvertedMultiplier(gestureDirection));\n    }\n\n    if (\n      this.getAnimateToValue(this.props) !== this.getAnimateToValue(prevProps)\n    ) {\n      // We need to trigger the animation when route was closed\n      // Thr route might have been closed by a `POP` action or by a gesture\n      // When route was closed due to a gesture, the animation would've happened already\n      // It's still important to trigger the animation so that `onClose` is called\n      // If `onClose` is not called, cleanup step won't be performed for gestures\n      this.animate({ closing });\n    }\n  }\n\n  componentWillUnmount() {\n    this.handleEndInteraction();\n  }\n\n  private isClosing = new Animated.Value(FALSE);\n\n  private inverted = new Animated.Value(\n    getInvertedMultiplier(this.props.gestureDirection)\n  );\n\n  private layout = {\n    width: new Animated.Value(this.props.layout.width),\n    height: new Animated.Value(this.props.layout.height),\n  };\n\n  private isSwiping = new Animated.Value(FALSE);\n\n  private interactionHandle: number | undefined;\n  private interactionHandleAnim: number | undefined;\n\n  private pendingGestureCallback: number | undefined;\n\n  private animate = ({\n    closing,\n    velocity,\n  }: {\n    closing: boolean;\n    velocity?: number;\n  }) => {\n    const {\n      gesture,\n      transitionSpec,\n      onOpen,\n      onClose,\n      onTransitionStart,\n    } = this.props;\n\n    const toValue = this.getAnimateToValue({\n      ...this.props,\n      closing,\n    });\n\n    const spec = closing ? transitionSpec.close : transitionSpec.open;\n\n    const animation =\n      spec.animation === 'spring' ? Animated.spring : Animated.timing;\n\n    this.setPointerEventsEnabled(!closing);\n    this.handleStartAnimationInteraction();\n\n    clearTimeout(this.pendingGestureCallback);\n\n    onTransitionStart?.({ closing });\n    animation(gesture, {\n      ...spec.config,\n      velocity,\n      toValue,\n      useNativeDriver,\n      isInteraction: false,\n    }).start(({ finished }) => {\n      this.handleEndAnimationInteraction();\n\n      clearTimeout(this.pendingGestureCallback);\n\n      if (finished) {\n        if (closing) {\n          onClose();\n        } else {\n          onOpen();\n        }\n      }\n    });\n  };\n\n  private getAnimateToValue = ({\n    closing,\n    layout,\n    gestureDirection,\n  }: {\n    closing?: boolean;\n    layout: Layout;\n    gestureDirection: GestureDirection;\n  }) => {\n    if (!closing) {\n      return 0;\n    }\n\n    return getDistanceForDirection(layout, gestureDirection);\n  };\n\n  private setPointerEventsEnabled = (enabled: boolean) => {\n    const pointerEvents = enabled ? 'box-none' : 'none';\n\n    this.contentRef.current?.setNativeProps({ pointerEvents });\n  };\n\n  private handleStartInteraction = () => {\n    if (this.interactionHandle === undefined) {\n      console.log('handleStartGestureInteraction - create handle');\n      this.interactionHandle = InteractionManager.createInteractionHandle();\n    }\n  };\n\n  private handleEndInteraction = () => {\n    if (this.interactionHandle !== undefined) {\n      console.log('handleEndGestureInteraction - clear handle');\n      InteractionManager.clearInteractionHandle(this.interactionHandle);\n      this.interactionHandle = undefined;\n    }\n  };\n\n  private handleStartAnimationInteraction = () => {\n    if (this.interactionHandleAnim === undefined) {\n      console.log('handleStartAnimationInteraction - create handle');\n      this.interactionHandleAnim = InteractionManager.createInteractionHandle();\n    }\n  };\n\n  private handleEndAnimationInteraction = () => {\n    if (this.interactionHandleAnim !== undefined) {\n      console.log('handleEndAnimationInteraction - clear handle');\n      InteractionManager.clearInteractionHandle(this.interactionHandleAnim);\n      this.interactionHandleAnim = undefined;\n    }\n  };\n\n  private handleGestureStateChange = ({\n    nativeEvent,\n  }: PanGestureHandlerGestureEvent) => {\n    const {\n      layout,\n      onClose,\n      onGestureBegin,\n      onGestureCanceled,\n      onGestureEnd,\n      gestureDirection,\n      gestureVelocityImpact,\n    } = this.props;\n\n    switch (nativeEvent.state) {\n      case GestureState.BEGAN:\n        this.isSwiping.setValue(TRUE);\n        this.handleStartInteraction();\n        onGestureBegin?.();\n        break;\n      case GestureState.CANCELLED: {\n        this.isSwiping.setValue(FALSE);\n        this.handleEndInteraction();\n\n        const velocity =\n          gestureDirection === 'vertical' ||\n          gestureDirection === 'vertical-inverted'\n            ? nativeEvent.velocityY\n            : nativeEvent.velocityX;\n\n        this.animate({ closing: this.props.closing, velocity });\n\n        onGestureCanceled?.();\n        break;\n      }\n      case GestureState.END: {\n        this.isSwiping.setValue(FALSE);\n\n        let distance;\n        let translation;\n        let velocity;\n\n        if (\n          gestureDirection === 'vertical' ||\n          gestureDirection === 'vertical-inverted'\n        ) {\n          distance = layout.height;\n          translation = nativeEvent.translationY;\n          velocity = nativeEvent.velocityY;\n        } else {\n          distance = layout.width;\n          translation = nativeEvent.translationX;\n          velocity = nativeEvent.velocityX;\n        }\n\n        const closing =\n          (translation + velocity * gestureVelocityImpact) *\n            getInvertedMultiplier(gestureDirection) >\n          distance / 2\n            ? velocity !== 0 || translation !== 0\n            : this.props.closing;\n\n        this.animate({ closing, velocity });\n\n        if (closing) {\n          // We call onClose with a delay to make sure that the animation has already started\n          // This will make sure that the state update caused by this doesn't affect start of animation\n          this.pendingGestureCallback = (setTimeout(\n            onClose,\n            32\n          ) as any) as number;\n        }\n\n        onGestureEnd?.();\n        break;\n      }\n    }\n  };\n\n  // Memoize this to avoid extra work on re-render\n  private getInterpolatedStyle = memoize(\n    (\n      styleInterpolator: StackCardStyleInterpolator,\n      index: number,\n      current: Animated.AnimatedInterpolation,\n      next: Animated.AnimatedInterpolation | undefined,\n      layout: Layout,\n      insetTop: number,\n      insetRight: number,\n      insetBottom: number,\n      insetLeft: number\n    ) =>\n      styleInterpolator({\n        index,\n        current: { progress: current },\n        next: next && { progress: next },\n        closing: this.isClosing,\n        swiping: this.isSwiping,\n        inverted: this.inverted,\n        layouts: {\n          screen: layout,\n        },\n        insets: {\n          top: insetTop,\n          right: insetRight,\n          bottom: insetBottom,\n          left: insetLeft,\n        },\n      })\n  );\n\n  // Keep track of the animation context when deps changes.\n  private getCardAnimationContext = memoize(\n    (\n      index: number,\n      current: Animated.AnimatedInterpolation,\n      next: Animated.AnimatedInterpolation | undefined,\n      layout: Layout,\n      insetTop: number,\n      insetRight: number,\n      insetBottom: number,\n      insetLeft: number\n    ) => ({\n      index,\n      current: { progress: current },\n      next: next && { progress: next },\n      closing: this.isClosing,\n      swiping: this.isSwiping,\n      inverted: this.inverted,\n      layouts: {\n        screen: layout,\n      },\n      insets: {\n        top: insetTop,\n        right: insetRight,\n        bottom: insetBottom,\n        left: insetLeft,\n      },\n    })\n  );\n\n  private gestureActivationCriteria() {\n    const { layout, gestureDirection, gestureResponseDistance } = this.props;\n\n    const distance =\n      gestureDirection === 'vertical' ||\n      gestureDirection === 'vertical-inverted'\n        ? gestureResponseDistance?.vertical !== undefined\n          ? gestureResponseDistance.vertical\n          : GESTURE_RESPONSE_DISTANCE_VERTICAL\n        : gestureResponseDistance?.horizontal !== undefined\n        ? gestureResponseDistance.horizontal\n        : GESTURE_RESPONSE_DISTANCE_HORIZONTAL;\n\n    if (gestureDirection === 'vertical') {\n      return {\n        maxDeltaX: 15,\n        minOffsetY: 5,\n        hitSlop: { bottom: -layout.height + distance },\n      };\n    } else if (gestureDirection === 'vertical-inverted') {\n      return {\n        maxDeltaX: 15,\n        minOffsetY: -5,\n        hitSlop: { top: -layout.height + distance },\n      };\n    } else {\n      const hitSlop = -layout.width + distance;\n      const invertedMultiplier = getInvertedMultiplier(gestureDirection);\n\n      if (invertedMultiplier === 1) {\n        return {\n          minOffsetX: 5,\n          maxDeltaY: 20,\n          hitSlop: { right: hitSlop },\n        };\n      } else {\n        return {\n          minOffsetX: -5,\n          maxDeltaY: 20,\n          hitSlop: { left: hitSlop },\n        };\n      }\n    }\n  }\n\n  private contentRef = React.createRef<View>();\n\n  render() {\n    const {\n      styleInterpolator,\n      index,\n      current,\n      gesture,\n      next,\n      layout,\n      insets,\n      overlay,\n      overlayEnabled,\n      shadowEnabled,\n      gestureEnabled,\n      gestureDirection,\n      pageOverflowEnabled,\n      children,\n      containerStyle: customContainerStyle,\n      contentStyle,\n      ...rest\n    } = this.props;\n\n    const interpolatedStyle = this.getInterpolatedStyle(\n      styleInterpolator,\n      index,\n      current,\n      next,\n      layout,\n      insets.top,\n      insets.right,\n      insets.bottom,\n      insets.left\n    );\n\n    const animationContext = this.getCardAnimationContext(\n      index,\n      current,\n      next,\n      layout,\n      insets.top,\n      insets.right,\n      insets.bottom,\n      insets.left\n    );\n\n    const {\n      containerStyle,\n      cardStyle,\n      overlayStyle,\n      shadowStyle,\n    } = interpolatedStyle;\n\n    const handleGestureEvent = gestureEnabled\n      ? Animated.event(\n          [\n            {\n              nativeEvent:\n                gestureDirection === 'vertical' ||\n                gestureDirection === 'vertical-inverted'\n                  ? { translationY: gesture }\n                  : { translationX: gesture },\n            },\n          ],\n          { useNativeDriver }\n        )\n      : undefined;\n\n    const { backgroundColor } = StyleSheet.flatten(contentStyle || {});\n    const isTransparent = backgroundColor\n      ? Color(backgroundColor).alpha() === 0\n      : false;\n\n    return (\n      <CardAnimationContext.Provider value={animationContext}>\n        <View pointerEvents=\"box-none\" {...rest}>\n          {overlayEnabled ? (\n            <View pointerEvents=\"box-none\" style={StyleSheet.absoluteFill}>\n              {overlay({ style: overlayStyle })}\n            </View>\n          ) : null}\n          <Animated.View\n            style={[styles.container, containerStyle, customContainerStyle]}\n            pointerEvents=\"box-none\"\n          >\n            <PanGestureHandler\n              enabled={layout.width !== 0 && gestureEnabled}\n              onGestureEvent={handleGestureEvent}\n              onHandlerStateChange={this.handleGestureStateChange}\n              {...this.gestureActivationCriteria()}\n            >\n              <Animated.View style={[styles.container, cardStyle]}>\n                {shadowEnabled && shadowStyle && !isTransparent ? (\n                  <Animated.View\n                    style={[\n                      styles.shadow,\n                      gestureDirection === 'horizontal'\n                        ? [styles.shadowHorizontal, styles.shadowLeft]\n                        : gestureDirection === 'horizontal-inverted'\n                        ? [styles.shadowHorizontal, styles.shadowRight]\n                        : gestureDirection === 'vertical'\n                        ? [styles.shadowVertical, styles.shadowTop]\n                        : [styles.shadowVertical, styles.shadowBottom],\n                      { backgroundColor },\n                      shadowStyle,\n                    ]}\n                    pointerEvents=\"none\"\n                  />\n                ) : null}\n                <CardSheet\n                  ref={this.contentRef}\n                  enabled={pageOverflowEnabled}\n                  layout={layout}\n                  style={contentStyle}\n                >\n                  {children}\n                </CardSheet>\n              </Animated.View>\n            </PanGestureHandler>\n          </Animated.View>\n        </View>\n      </CardAnimationContext.Provider>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  overlay: {\n    flex: 1,\n    backgroundColor: '#000',\n  },\n  shadow: {\n    position: 'absolute',\n    shadowRadius: 5,\n    shadowColor: '#000',\n    shadowOpacity: 0.3,\n  },\n  shadowHorizontal: {\n    top: 0,\n    bottom: 0,\n    width: 3,\n    shadowOffset: { width: -1, height: 1 },\n  },\n  shadowLeft: {\n    left: 0,\n  },\n  shadowRight: {\n    right: 0,\n  },\n  shadowVertical: {\n    left: 0,\n    right: 0,\n    height: 3,\n    shadowOffset: { width: 1, height: -1 },\n  },\n  shadowTop: {\n    top: 0,\n  },\n  shadowBottom: {\n    bottom: 0,\n  },\n});\n"]}